#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Aug 21 13:22:59 2020
This script uses a protein genbank file generated by download_all_gb_from_ncbi.py and will
search for the contig where each of the proteins was annotated. This contigs will later
be used by find_neighbour_ncbi.py to search for neighbouring transporters.

sys.argv[1]=genbank file with all protein sequences
sys.argv[2]=mapping table filename
@author: maro
"""
import sys
import os
import time
import zipfile
from Bio import ExPASy
from Bio import SwissProt

from Bio import SeqIO
from Bio import Entrez
Entrez.api_key = '6201482c3419ae91449619dccb91fe413e08'
Entrez.email = "widmer.maro@gmail.com"

protein_ids=[]
assembly_ids=[]


argv="filtered_all_rest_lysine_decarboxylases.gb"
name=argv[:-3]

#check existens and content of gb and mapping table
try:
    for seq_record in SeqIO.parse(sys.argv[1], "genbank"):
        protein_ids.append(seq_record.id)
    count=len(protein_ids)
except FileNotFoundError:
    count=0

cnt=0
try:
    m = open(sys.argv[2], "r")
    for line in m:
        cnt+=1
    m.close()
except FileNotFoundError:
    cnt=0

#run only if mapping_table has not same number of sequences as gb file
if count!=cnt:

    f = open(sys.argv[2], "w")
    f.close()
    
    
    from urllib.error import HTTPError  # for Python 3
    batch_size = 3
    
    for seq_record in SeqIO.parse(sys.argv[1], "genbank"):
        print("{} IDs to go...\r".format(count))
        # end = min(count, start+batch_size)
        # print("Going to download record %i to %i" % (start+1, end))
        attempt = 1
        while attempt <= 5:
            try:
                fetch_handle = Entrez.elink(dbfrom="protein",db = 'nuccore',
                             id=seq_record.id,
                             linkname="protein_nuccore")
                record = Entrez.read(fetch_handle)
                assembly_id=record[0]["LinkSetDb"][0]['Link'][0]['Id']
                
                # assembly_ids.append(assembly_id)
                print("{}\t{}".format(seq_record.id,assembly_id))
                f = open(sys.argv[2], "a")
                f.write("{}\t{}\n".format(seq_record.id,assembly_id))
                f.close()
                attempt=6
            except HTTPError as err:
                if 500 <= err.code <= 599:
                    print("Received error from server %s" % err)
                    print("Attempt %i of 5" % attempt)
                    attempt += 1
                    time.sleep(15)
                else:
                    raise
            except IndexError as err:
                print("Received index error from server %s for {}".format(seq_record.id) % err)
                attempt=6
                f = open(sys.argv[2], "a")
                f.write("{}\t{}\n".format(seq_record.id,"no_contig_found"))
                f.close()
                time.sleep(1)
            except RuntimeError:
                print("Blob error...trying again...")
                attempt+=1
                time.sleep(15)
        fetch_handle.close()
        count-=1
else:
    print("Mapping table with same number of sequences already exists")