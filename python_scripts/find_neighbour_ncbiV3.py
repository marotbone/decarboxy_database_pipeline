#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Sep  4 20:30:13 2020
Tool for searching neighbouring protein sequences based on similarity score 
to reference sequence (sys.argv[4]).
This script needs as sys.argv[1] a genbank file with protein sequences,
for sys.argv[2] a mapping_table.txt created by create_mapping_table.py,
a reference_transporter FASTA sequence (sys.argv[4]) which will as 
an alignment to find similar neighbouring sequences.

Information about findings are stored in genbank file sys.argv[1] and 
neighbouring_transporter.gb (will automaticly be stored in same folder as mapping_table sys.argv[2]) under 
.annotations["source"].



sys.argv[1]=path/decarboxylase.gb aa genbank file
sys.argv[2]=path/mapping_table.txt
sys.argv[3]=path/genbank_repository folder (contigs were decarboxylases were found, generated by download_assemblies_maro.py)
sys.argv[4]=path/reference_transporter.fasta
sys.argv[5]=summary output filename
@author: maro
"""
import sys
from Bio import SwissProt
from Bio import SeqIO
from Bio import ExPASy
import time
from Bio.Align import substitution_matrices
from Bio import Align
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
#from Bio.Alphabet import generic_protein 

# sys.argv=["","","","","",""]
# sys.argv[1]="/home/maro/Masters/scripts/find_neighbour/pipeline_developing/data/all_bacilli_histidine_decarboxylases/decarboxylases/aa_sequences/all_bacilli_histidine_decarboxylases.gb"
# sys.argv[2]="/home/maro/Masters/scripts/find_neighbour/pipeline_developing/data/all_bacilli_histidine_decarboxylases/mapping_table.txt"
# sys.argv[3]="/home/maro/Masters/scripts/find_neighbour/pipeline_developing/data/all_bacilli_histidine_decarboxylases/genbank_repository"
# sys.argv[4]="/home/maro/Masters/scripts/find_neighbour/pipeline_developing/transporter_references/hdcP_reference_transporter_L.parabuchneri.fasta"
# sys.argv[5]="/home/maro/Masters/scripts/find_neighbour/pipeline_developing/python_scripts/testing_outputs/TEST.TXT"

sim_threshold=0.5
ids={}
uniprot_ids=[]
target_records=[]
decarboxy_records=[]
mapping_dict={}
path=sys.argv[2][:-18]
name=sys.argv[1][:-3]
#loading reference transporter sequence
for seq_record in SeqIO.parse(sys.argv[4], "fasta"):
    reference=seq_record
len_ref=len(reference)
allowed_diff=30

f = open(sys.argv[5], "w")
f.write("organism:\tdecarboxylase_name:\tEMBL-ID:\ttransporter_name:\tEMBL-ID:\trelative_pos:\n")
f.close()    

aligner = Align.PairwiseAligner()
aligner.substitution_matrix = substitution_matrices.load("BLOSUM62")

ref_blosum_score=aligner.score(reference.seq, reference.seq)

for seq_record in SeqIO.parse(sys.argv[1], "genbank"):
    decarboxy_records.append(seq_record)

with open(sys.argv[2], "r") as f:
    for line in f:
        embl_prot_ac=line.split()[0]#take assembly id
        embl_assembl_id=line.split()[1]#take assembly id
        if embl_assembl_id=="no_contig_found":
            continue
        else:
            mapping_dict[embl_prot_ac]=embl_assembl_id
        
total_queries=len(decarboxy_records)
ind=0  
for y in decarboxy_records:
    
    embl_prot_ac=y.id
    try:
        embl_assembl_id=mapping_dict[embl_prot_ac]
    except KeyError:
        print("could not find {}".format(embl_prot_ac))
        total_queries-=1
        continue
    print("{} queries to go...\r".format(total_queries))
    # record = list(SeqIO.parse('{}/{}.gb'.format(sys.argv[3],y[1]), "genbank"))
    record = list(SeqIO.parse('{}/{}.gb'.format(sys.argv[3],embl_assembl_id), "genbank"))[0]
    # print(type(record.features))
    # print(type(record.features))
    feauture_list=record.features
    index=-1
    for z in feauture_list:
        index+=1
        # print(z.qualifiers.keys())
        # print(feauture_list[index].qualifiers.keys())
        if z.qualifiers.keys() >= {"product", "protein_id","translation"}:
            # print(z.qualifiers["protein_id"][0])
            # print(y[0])
            if z.qualifiers["protein_id"][0] == embl_prot_ac:
                if index-2>=0:
                    if record.features[index-2].qualifiers.keys() >= {"product", "protein_id","translation"}:
                        target_seq = SeqRecord(Seq(record.features[index-2].qualifiers["translation"][0]),id=str(record.features[index-2].qualifiers["protein_id"][0]),description=str(record.features[index-2].qualifiers["product"][0]),annotations={"molecule_type": ""})
                        # print(target_seq.description, type(reference.seq))
                        # print(aligner.score(reference.seq, target_seq.seq))
                        try:
                            sim_score=aligner.score(reference.seq, target_seq.seq)/ref_blosum_score
                        # print(sim_score)
                            if sim_score>sim_threshold and len_ref-allowed_diff<len(target_seq)<len_ref+allowed_diff:
                                f = open(sys.argv[5], "a")
                                f.write("{}\t{}\t{}\t{}\t{}\tdownstream -1\n".format(record.annotations["organism"],z.qualifiers["product"][0], embl_prot_ac, record.features[index-2].qualifiers["product"][0],record.features[index-2].qualifiers["protein_id"][0]))
                                # print("{}\t{}\t{}\t{}\tdownstream -1".format(z.qualifiers["product"][0], embl_prot_ac, record.features[index-1].qualifiers["product"][0],record.features[index-1].qualifiers["protein_id"][0]))
                                f.close()
                                target_seq.annotations["source"]="ds-1 to {} score={:.2f}".format(embl_prot_ac,sim_score)
                                target_seq.annotations["organism"]=y.annotations["organism"]
                                target_seq.annotations["date"]=record.annotations["date"]
                                decarboxy_records[ind].annotations["source"]="{} ds-1 score={:.2f}".format(target_seq.id,sim_score)
                                target_records.append(target_seq)
                        except ValueError:
                            print("{} sequence contains strange letters...".format(target_seq.id))   
                            
                if  index-4>=0:
                    if record.features[index-4].qualifiers.keys() >= {"product", "protein_id","translation"}:
                        target_seq = SeqRecord(Seq(record.features[index-4].qualifiers["translation"][0]),id=str(record.features[index-4].qualifiers["protein_id"][0]),description=str(record.features[index-4].qualifiers["product"][0]),annotations={"molecule_type": ""})
                        # print(target_seq.description, type(reference.seq))
                        # print(aligner.score(reference.seq, target_seq.seq))
                        try:
                            sim_score=aligner.score(reference.seq, target_seq.seq)/ref_blosum_score
                        # print(sim_score)
                            if sim_score>sim_threshold and len_ref-allowed_diff<len(target_seq)<len_ref+allowed_diff:
                                f = open(sys.argv[5], "a")
                                f.write("{}\t{}\t{}\t{}\t{}\tdownstream -2\n".format(record.annotations["organism"],z.qualifiers["product"][0], embl_prot_ac, record.features[index-4].qualifiers["product"][0],record.features[index-4].qualifiers["protein_id"][0]))
                                # print("{}\t{}\t{}\t{}\tdownstream -1".format(z.qualifiers["product"][0], embl_prot_ac, record.features[index-1].qualifiers["product"][0],record.features[index-1].qualifiers["protein_id"][0]))
                                f.close()
                                target_seq.annotations["source"]="ds-2 to {} score={:.2f}".format(embl_prot_ac,sim_score)
                                target_seq.annotations["organism"]=y.annotations["organism"]
                                target_seq.annotations["date"]=record.annotations["date"]
                                decarboxy_records[ind].annotations["source"]="{} ds-2 score={:.2f}".format(target_seq.id,sim_score)
                                target_records.append(target_seq)
                        except ValueError:
                            print("{} sequence contains strange letters...".format(target_seq.id))   
                if index+2<=len(feauture_list)-1:
                    if record.features[index+2].qualifiers.keys() >= {"product", "protein_id","translation"}:
                        target_seq = SeqRecord(Seq(record.features[index+2].qualifiers["translation"][0]),id=str(record.features[index+2].qualifiers["protein_id"][0]),description=str(record.features[index+2].qualifiers["product"][0]),annotations={"molecule_type": ""})
                        # print(target_seq.description, type(reference.seq))
                        # print(aligner.score(reference.seq, target_seq.seq))
                        try:
                            sim_score=aligner.score(reference.seq, target_seq.seq)/ref_blosum_score
                        # print(sim_score)
                            if sim_score>sim_threshold and len_ref-allowed_diff<len(target_seq)<len_ref+allowed_diff:
                                f = open(sys.argv[5], "a")
                                f.write("{}\t{}\t{}\t{}\t{}\tupstream +1\n".format(record.annotations["organism"],z.qualifiers["product"][0], embl_prot_ac, record.features[index+2].qualifiers["product"][0],record.features[index+2].qualifiers["protein_id"][0]))
                                # print("{}\t{}\t{}\t{}\tdownstream -1".format(z.qualifiers["product"][0], embl_prot_ac, record.features[index-1].qualifiers["product"][0],record.features[index-1].qualifiers["protein_id"][0]))
                                f.close()
                                target_seq.annotations["source"]="us+1 to {} score={:.2f}".format(embl_prot_ac,sim_score)
                                target_seq.annotations["organism"]=y.annotations["organism"]
                                target_seq.annotations["date"]=record.annotations["date"]
                                decarboxy_records[ind].annotations["source"]="{} us+1 score={:.2f}".format(target_seq.id,sim_score)
                                target_records.append(target_seq)
                        except ValueError:
                            print("{} sequence contains strange letters...".format(target_seq.id))   
                if index+4<=len(feauture_list)-1:
                    if record.features[index+4].qualifiers.keys() >= {"product", "protein_id","translation"}:
                        target_seq = SeqRecord(Seq(record.features[index+4].qualifiers["translation"][0]),id=str(record.features[index+4].qualifiers["protein_id"][0]),description=str(record.features[index+4].qualifiers["product"][0]),annotations={"molecule_type": ""})
                        # print(target_seq.description, type(reference.seq))
                        # print(aligner.score(reference.seq, target_seq.seq))
                        try:
                            sim_score=aligner.score(reference.seq, target_seq.seq)/ref_blosum_score
                            if sim_score>sim_threshold and len_ref-allowed_diff<len(target_seq)<len_ref+allowed_diff:
                                f = open(sys.argv[5], "a")
                                f.write("{}\t{}\t{}\t{}\t{}\tupstream +2\n".format(record.annotations["organism"],z.qualifiers["product"][0], embl_prot_ac, record.features[index+4].qualifiers["product"][0],record.features[index+4].qualifiers["protein_id"][0]))
                                # print("{}\t{}\t{}\t{}\tdownstream -1".format(z.qualifiers["product"][0], embl_prot_ac, record.features[index-1].qualifiers["product"][0],record.features[index-1].qualifiers["protein_id"][0]))
                                f.close()
                                target_seq.annotations["source"]="us+2 to {} score={:.2f}".format(embl_prot_ac,sim_score)
                                target_seq.annotations["organism"]=y.annotations["organism"]
                                target_seq.annotations["date"]=record.annotations["date"]
                                decarboxy_records[ind].annotations["source"]="{} us+2 score={:.2f}".format(target_seq.id,sim_score)
                                target_records.append(target_seq)
                        except ValueError:
                            print("{} sequence contains strange letters...".format(target_seq.id))   
        
    query_stop=time.time()
        # print("For query nr:{} {} {} {:.1f}s of searching".format(total_queries,i,y,query_stop-query_start))          
    total_queries-=1
    ind+=1


SeqIO.write(decarboxy_records, "{}.fasta".format(name), "fasta")
SeqIO.write(decarboxy_records, sys.argv[1], "genbank")
SeqIO.write(target_records, "{}/neighbouring_transporters.fasta".format(path), "fasta")
SeqIO.write(target_records, "{}/neighbouring_transporters.gb".format(path), "genbank")

